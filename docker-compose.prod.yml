services:
  db:
    container_name: k100-db
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - TZ=${TZ}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    restart: ${RESTART}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - k100

  api:
    container_name: k100-api
    image: k100-api_prod
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    volumes:
      - ./gpx:/gpx
    ports:
      - "8000:8000"
    environment:
      - TZ=${TZ}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}
      - SECRET_KEY=${SECRET_KEY}
      - STRAVA_CLIENT_ID=${STRAVA_CLIENT_ID}
      - STRAVA_CLIENT_SECRET=${STRAVA_CLIENT_SECRET}
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - FRONTEND_URL=${FRONTEND_URL}
      - PROJECT_NAME=${PROJECT_NAME}
      - SOURCE_GPX_PATH=gpx
    depends_on:
      db:
        condition: service_healthy
    restart: ${RESTART}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 120s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - k100

  frontend:
    container_name: k100-frontend
    image: k100-frontend_prod
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    ports:
      - "3000:3000"
    environment:
      - TZ=${TZ}
      - API_URL=${API_URL}
      - NEXT_PUBLIC_PROJECT_NAME=${PROJECT_NAME}
    depends_on:
      - api
    restart: ${RESTART}
    networks:
      - k100

  worker:
    container_name: k100-worker
    build:
      context: ./worker
      dockerfile: Dockerfile
    volumes:
      - ./gpx:/gpx
    environment:
      - TZ=${TZ}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}
      - SECRET_KEY=${SECRET_KEY}
      - STRAVA_CLIENT_ID=${STRAVA_CLIENT_ID}
      - STRAVA_CLIENT_SECRET=${STRAVA_CLIENT_SECRET}
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SOURCE_GPX_PATH=gpx
      - FRONTEND_URL=${FRONTEND_URL}
      - PROJECT_NAME=${PROJECT_NAME}
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_healthy
    restart: ${RESTART}
    networks:
      - k100

  cloudflared:
    container_name: k100-cloudflared
    image: cloudflare/cloudflared:latest
    restart: ${RESTART}
    command: tunnel run
    volumes:
      - cf_data:/etc/cloudflared
    environment:
      - TZ=${TZ}
      - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
    networks:
      - proxy

  nginx:
    container_name: k100-nginx
    image: nginx:alpine
    # ports:
    #   - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
      - ./favicon.ico:/var/www/html/favicon.ico
    depends_on:
      - frontend
      - api
    restart: ${RESTART}
    networks:
      - k100
      - proxy

volumes:
  postgres_data:
  pgadmin_data:
  cf_data:

networks:
  proxy:
    external: true
  k100:
    external: true